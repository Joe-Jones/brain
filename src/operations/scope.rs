use std::rc::Rc;
use std::collections::{VecDeque, HashMap};

use parser::Identifier;
use memory::{StaticAllocator, MemoryBlock};

use super::operation::Operation;
use super::item_type::{ItemType, FuncArgs};

pub type TypeId = usize;

/// Represents a single item in a scope
pub enum ScopeItem {
    /// A type, not associated with any memory
    /// Used for a struct/type declaration, not the declaration
    /// of a variable with a type (TypedBlock should be used for that)
    Type(TypeId),

    /// A typed block of memory
    TypedBlock {
        type_id: TypeId,
        memory: MemoryBlock,
    },

    /// A built-in function definition
    BuiltInFunction {
        /// The ID of the type associated with this function
        id: TypeId,
        /// Generates operations that represent calling the
        /// function with the given arguments
        operations: Rc<Fn(FuncArgs, ScopeStack) -> Vec<Operation>>,
    },
}

/// The type ID that corresponds to the unit type
pub const UNIT_TYPE_ID: TypeId = 0;

/// Represents a single level of scope
pub type Scope = HashMap<Identifier, ScopeItem>;

pub struct ScopeStack {
    stack: VecDeque<Scope>,
    allocator: StaticAllocator,
    /// A vector of all the declared types used to produce unique identities
    /// for all types so that types are static and not dependent on the context
    /// in which they are used.
    /// Basically, if we declare a type Foo and a variable with that type,
    /// we don't want a later declaration of Foo change the type of the variable
    /// Also used in functions/closures to uniquely refer to types in that context
    types: Vec<ItemType>,
}

impl ScopeStack {
    pub fn new() -> ScopeStack {
        ScopeStack {
            stack: {
                let mut queue = VecDeque::new();
                queue.push_back(Scope::new());
                queue
            },
            allocator: StaticAllocator::new(),
            types: vec![ItemType::Unit],
        }
    }

    /// Pushes a new level of scope onto the stack
    /// This scope will become the current scope
    pub fn push_scope(&mut self) {
        self.stack.push_back(Scope::new());
    }

    /// Removes and returns the top level scope (current scope)
    ///
    /// # Panics
    /// Panics if there is no scope in the stack
    pub fn pop_scope(&mut self) -> Scope {
        self.stack.pop_back().unwrap()
    }

    /// Returns the type associated with the given TypeId
    pub fn get_type(&self, type_id: TypeId) -> &ItemType {
        // We just unwrap here because this isn't an error that can be generated by the user's
        // mistake. If this fails, it has to be a bug in the compiler.
        self.types.get(type_id).expect("Invalid TypeId used to lookup type")
    }

    /// Looks up a name starting at the current scope
    /// Returns ALL matches so that the caller can determine which definition is
    /// the correct one
    /// Definitions are returned in order from latest definition to oldest
    /// Always use the first definition that matches the type you are looking for
    pub fn lookup(&self, name: &Identifier) -> Vec<&ScopeItem> {
        self.stack.iter().rev().map(|sc| sc.get(name)).fold(Vec::new(), |mut acc, r| match r {
            Some(def) => {
                acc.push(def);
                acc
            },
            None => acc,
        })
    }

    /// Declares a type with the given name
    /// Returns the unique identifier of that type
    pub fn declare_type(&mut self, name: Identifier, typ: ItemType) -> TypeId {
        let type_id = self.insert_type(typ);
        self.insert_current(name, ScopeItem::Type(type_id));

        type_id
    }

    /// Declares a name with the given type and allocates enough space for that type
    /// The name is declared in the "current" scope which is at the top of the stack
    /// Returns the allocated memory block
    pub fn declare(&mut self, name: Identifier, type_id: TypeId) -> MemoryBlock {
        let size = self.get_type(type_id).required_size(self);
        let mem = self.allocator.allocate(size);
        self.insert_current(name, ScopeItem::TypedBlock {
            type_id: type_id,
            memory: mem,
        });

        mem
    }

    /// Allocate a memory block that is large enough for the given type
    /// Does not associate memory block with a name which means it cannot be looked up later
    /// Returns the allocated memory block
    pub fn allocate(&mut self, typ: &ItemType) -> MemoryBlock {
        let size = typ.required_size(self);
        self.allocator.allocate(size)
    }

    /// Declares a built in function with the given name and type definition
    /// The name is declared in the "current" scope which is at the top of the stack
    /// The function is guaranteed to be called with arguments that match its given type signature
    pub fn declare_builtin_function<F: 'static>(&mut self, name: Identifier, typ: ItemType, f: F)
        where F: Fn(FuncArgs, ScopeStack) -> Vec<Operation> {

        // Make sure we are declaring the function as a function type
        debug_assert!(match typ {
            ItemType::Function { .. } => true,
            _ => false,
        });

        let type_id = self.insert_type(typ);
        self.insert_current(name, ScopeItem::BuiltInFunction {
            id: type_id,
            operations: Rc::new(f),
        });
    }

    /// Inserts a ScopeItem into the current scope
    fn insert_current(&mut self, name: Identifier, item: ScopeItem) {
        // Notice that we insert directly without caring about whether the name already exists
        // It's OK to overwrite existing names because we support rebinding
        if let Some(scope) = self.stack.back_mut() {
            scope.insert(name, item);
        }
        else {
            panic!("Attempt to declare name despite having no current scope");
        }
    }

    /// Inserts a type defintion into the types field and returns its new TypeId
    fn insert_type(&mut self, typ: ItemType) -> TypeId {
        self.types.push(typ);

        self.types.len() - 1
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use parser::Identifier;
    use operations::item_type::ItemType;

    #[test]
    fn unit_type_id() {
        let scope = ScopeStack::new();

        // Sanity check
        assert!(match *scope.get_type(UNIT_TYPE_ID) {
            ItemType::Unit => true,
            _ => false,
        });
    }

    #[test]
    fn multiple_definitions() {
        let mut scope = ScopeStack::new();
        let type_id = scope.declare_type(Identifier::from("FooType"), ItemType::Primitive(1));
        assert_eq!(scope.lookup(&Identifier::from("foo")).len(), 0);

        scope.declare(Identifier::from("foo"), type_id);
        assert_eq!(scope.lookup(&Identifier::from("foo")).len(), 1);

        // Declaring the same name in the same scope should overwrite the
        // definition
        scope.declare(Identifier::from("foo"), type_id);
        assert_eq!(scope.lookup(&Identifier::from("foo")).len(), 1);

        scope.push_scope();
        // Declaring foo in another scope should add a definition
        scope.declare(Identifier::from("foo"), type_id);
        assert_eq!(scope.lookup(&Identifier::from("foo")).len(), 2);

        // Declaring the same name in the same scope should overwrite the
        // definition
        scope.declare(Identifier::from("foo"), type_id);
        assert_eq!(scope.lookup(&Identifier::from("foo")).len(), 2);
    }
}
